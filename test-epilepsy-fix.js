// Script para testar se a "epilepsia" das categorias foi corrigida
// Execute no console do navegador

console.log('üéØ TESTE DA CORRE√á√ÉO DA EPILEPSIA DAS CATEGORIAS');
console.log('===============================================');

let renderCount = 0;
let cacheHits = 0;
let cacheMisses = 0;
let buttonClicks = 0;
let buttonResponses = 0;

// Interceptar console.log para capturar logs de categoria
const originalLog = console.log;
console.log = function(...args) {
  const message = args.join(' ');
  
  // Detectar logs de categoria
  if (message.includes('[Category Cache]')) {
    if (message.includes('Usando cache v√°lido')) {
      cacheHits++;
      console.log(`‚úÖ Cache Hit #${cacheHits}: ${message}`);
    } else if (message.includes('recalculando categorias')) {
      cacheMisses++;
      renderCount++;
      if (cacheMisses > 3) {
        console.error(`‚ùå EPILEPSIA AINDA PRESENTE! Cache Miss #${cacheMisses}: ${message}`);
      } else {
        console.warn(`‚ö†Ô∏è Cache Miss #${cacheMisses}: ${message}`);
      }
    }
  }
  
  // Chamar console.log original
  originalLog.apply(console, args);
};

// Testar responsividade dos bot√µes
console.log('\nüñ±Ô∏è TESTANDO RESPONSIVIDADE DOS BOT√ïES:');
console.log('Clique em alguns bot√µes na p√°gina e observe se respondem na primeira tentativa');

// Interceptar cliques para contar
document.addEventListener('click', (event) => {
  if (event.target.tagName === 'BUTTON' || event.target.closest('button')) {
    buttonClicks++;
    console.log(`üñ±Ô∏è Clique #${buttonClicks} detectado em bot√£o`);
    
    // Verificar se houve resposta (mudan√ßa visual ou a√ß√£o)
    setTimeout(() => {
      buttonResponses++;
      if (buttonResponses === buttonClicks) {
        console.log(`‚úÖ Bot√£o respondeu imediatamente`);
      } else {
        console.warn(`‚ö†Ô∏è Poss√≠vel atraso na resposta do bot√£o`);
      }
    }, 100);
  }
});

// Monitorar por 20 segundos
console.log('\nüîç Monitorando por 20 segundos...');
console.log('1. V√° para a aba "Relat√≥rios"');
console.log('2. Observe a se√ß√£o "Detalhes por Categoria"');
console.log('3. Clique em alguns bot√µes para testar responsividade');

setTimeout(() => {
  // Restaurar console.log
  console.log = originalLog;
  
  console.log('\nüìä RESULTADO DO TESTE:');
  console.log(`Cache Hits: ${cacheHits}`);
  console.log(`Cache Misses: ${cacheMisses}`);
  console.log(`Total de rec√°lculos: ${renderCount}`);
  console.log(`Cliques em bot√µes: ${buttonClicks}`);
  console.log(`Respostas de bot√µes: ${buttonResponses}`);
  
  // Avaliar resultados
  console.log('\nüéØ AVALIA√á√ÉO:');
  
  if (cacheMisses <= 2) {
    console.log('‚úÖ EPILEPSIA CORRIGIDA! Poucos cache misses.');
  } else if (cacheMisses <= 5) {
    console.warn('‚ö†Ô∏è Melhoria parcial. Ainda h√° alguns rec√°lculos desnecess√°rios.');
  } else {
    console.error('‚ùå EPILEPSIA AINDA PRESENTE! Muitos cache misses.');
  }
  
  if (cacheHits > cacheMisses * 3) {
    console.log('‚úÖ CACHE FUNCIONANDO! Mais hits que misses.');
  } else {
    console.warn('‚ö†Ô∏è Cache pode n√£o estar funcionando adequadamente.');
  }
  
  if (buttonClicks > 0) {
    const responsiveness = (buttonResponses / buttonClicks) * 100;
    if (responsiveness >= 90) {
      console.log(`‚úÖ BOT√ïES RESPONSIVOS! ${responsiveness.toFixed(1)}% de resposta imediata.`);
    } else if (responsiveness >= 70) {
      console.warn(`‚ö†Ô∏è RESPONSIVIDADE MODERADA: ${responsiveness.toFixed(1)}%`);
    } else {
      console.error(`‚ùå BOT√ïES LENTOS: ${responsiveness.toFixed(1)}% de resposta imediata.`);
    }
  }
  
  // Teste final: verificar se arrays est√£o est√°veis
  console.log('\nüî¨ TESTE FINAL - ESTABILIDADE DAS ARRAYS:');
  
  try {
    // Simular m√∫ltiplas chamadas aos hooks
    let arrayChanges = 0;
    let prevArrays = null;
    
    for (let i = 0; i < 10; i++) {
      setTimeout(() => {
        // Verificar se as arrays mudaram sem motivo
        const currentArrays = {
          // Estas chamadas devem retornar as mesmas refer√™ncias se nada mudou
          timestamp: Date.now()
        };
        
        if (prevArrays && JSON.stringify(currentArrays) !== JSON.stringify(prevArrays)) {
          arrayChanges++;
        }
        
        prevArrays = currentArrays;
        
        if (i === 9) {
          console.log(`üìä Mudan√ßas de array desnecess√°rias: ${arrayChanges}/10`);
          
          if (arrayChanges === 0) {
            console.log('‚úÖ PERFEITO! Arrays completamente est√°veis.');
          } else if (arrayChanges <= 2) {
            console.log('‚úÖ BOM! Arrays majoritariamente est√°veis.');
          } else {
            console.warn('‚ö†Ô∏è Arrays ainda inst√°veis em alguns casos.');
          }
        }
      }, i * 100);
    }
  } catch (error) {
    console.error('‚ùå Erro no teste de estabilidade:', error);
  }
  
}, 20000);

console.log('‚ú® Teste iniciado! Aguarde 20 segundos e interaja com a p√°gina...');
