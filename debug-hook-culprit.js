// Script para identificar EXATAMENTE qual hook est√° causando re-renders
// Execute no console do navegador

console.log('üéØ IDENTIFICANDO O HOOK CULPADO');
console.log('==============================');

let renderCount = 0;
let hookChanges = {};
let suspiciousHookChanges = {};

// Interceptar console.log para capturar logs espec√≠ficos
const originalLog = console.log;

console.log = function(...args) {
  const message = args.join(' ');
  
  // Contar re-renders do PerformanceReports
  if (message.includes('[PERFORMANCE RENDER]')) {
    renderCount++;
    if (renderCount <= 5) {
      console.error(`üî¥ RENDER #${renderCount}: ${message}`);
    }
  }
  
  // Contar mudan√ßas nos hooks principais
  if (message.includes('[HOOK CHANGE]')) {
    const hookName = message.match(/\[HOOK CHANGE\] (\w+) mudou:/)?.[1];
    if (hookName) {
      hookChanges[hookName] = (hookChanges[hookName] || 0) + 1;
      if (hookChanges[hookName] <= 3) {
        console.error(`üî¥ HOOK CHANGE: ${hookName} mudou ${hookChanges[hookName]}x - ${message}`);
      }
    }
  }
  
  // Contar mudan√ßas nos hooks suspeitos
  if (message.includes('[SUSPICIOUS HOOK]')) {
    const hookName = message.match(/\[SUSPICIOUS HOOK\] (\w+) mudou:/)?.[1];
    if (hookName) {
      suspiciousHookChanges[hookName] = (suspiciousHookChanges[hookName] || 0) + 1;
      if (suspiciousHookChanges[hookName] <= 3) {
        console.error(`üî¥ SUSPICIOUS HOOK: ${hookName} mudou ${suspiciousHookChanges[hookName]}x - ${message}`);
      }
    }
  }
  
  // Chamar console.log original
  originalLog.apply(console, args);
};

// Monitorar por 5 segundos
console.log('\nüîç MONITORANDO POR 5 SEGUNDOS...');
console.log('Fique na aba "Relat√≥rios" e observe os logs');

setTimeout(() => {
  // Restaurar console
  console.log = originalLog;
  
  console.log('\nüéØ RESULTADO DA INVESTIGA√á√ÉO:');
  console.log('=============================');
  
  console.log(`üìä CONTADORES:`);
  console.log(`Total de Re-renders: ${renderCount}`);
  console.log(`Mudan√ßas em Hooks Principais:`, hookChanges);
  console.log(`Mudan√ßas em Hooks Suspeitos:`, suspiciousHookChanges);
  
  // An√°lise detalhada
  console.log('\nüîç AN√ÅLISE DO CULPADO:');
  
  // Identificar o hook que mais muda
  const allHookChanges = { ...hookChanges, ...suspiciousHookChanges };
  const sortedHooks = Object.entries(allHookChanges)
    .sort(([,a], [,b]) => b - a);
  
  if (sortedHooks.length > 0) {
    const [culpritHook, changeCount] = sortedHooks[0];
    console.log(`üéØ HOOK CULPADO: "${culpritHook}" mudou ${changeCount} vezes!`);
    
    if (culpritHook.includes('Length')) {
      console.log(`üîß SOLU√á√ÉO: O hook "${culpritHook}" est√° retornando arrays com novas refer√™ncias`);
      console.log(`   ‚Üí Verificar se o hook est√° usando useMemo() corretamente`);
      console.log(`   ‚Üí Verificar se as depend√™ncias do useMemo() s√£o est√°veis`);
    } else if (culpritHook === 'renderKey') {
      console.log(`üîß SOLU√á√ÉO: O "renderKey" est√° mudando constantemente`);
      console.log(`   ‚Üí Remover ou corrigir o useEffect que for√ßa re-renders`);
    } else if (culpritHook === 'activePeriod' || culpritHook === 'activeTab') {
      console.log(`üîß SOLU√á√ÉO: State "${culpritHook}" est√° mudando constantemente`);
      console.log(`   ‚Üí Verificar se algum useEffect est√° alterando este state em loop`);
    } else {
      console.log(`üîß SOLU√á√ÉO: Investigar por que "${culpritHook}" est√° mudando`);
    }
  } else {
    console.log(`‚ùì NENHUM HOOK ESPEC√çFICO IDENTIFICADO`);
    console.log(`üîß POSS√çVEIS CAUSAS:`);
    console.log(`   ‚Üí Algum useEffect sem depend√™ncias corretas`);
    console.log(`   ‚Üí Componente pai re-renderizando constantemente`);
    console.log(`   ‚Üí Context provider mudando constantemente`);
  }
  
  // Recomenda√ß√µes
  console.log('\nüí° PR√ìXIMOS PASSOS:');
  
  if (renderCount > 20) {
    console.log('1. üö® URGENTE: Aplicar React.memo() ao PerformanceReports');
    console.log('2. üîß Corrigir o hook culpado identificado acima');
    console.log('3. üîç Verificar se o componente pai est√° causando re-renders');
  } else {
    console.log('‚úÖ Re-renders controlados, problema pode estar resolvido');
  }
  
  // Teste de navega√ß√£o
  console.log('\nüß™ TESTE DE NAVEGA√á√ÉO:');
  console.log('Agora navegue para outra p√°gina (ex: Tarefas)');
  console.log('Se os re-renders pararem, o problema √© espec√≠fico do PerformanceReports');
  
}, 5000);

console.log('‚ú® Investiga√ß√£o iniciada! Aguarde 5 segundos...');
