// Script para testar se o loop infinito foi corrigido
// Execute no console do navegador

console.log('üéØ TESTE DE CORRE√á√ÉO DO LOOP INFINITO');
console.log('====================================');

let vitalityLogs = 0;
let renderLogs = 0;
let syncLogs = 0;
let totalLogs = 0;

// Interceptar console.log para contar logs espec√≠ficos
const originalLog = console.log;
const originalError = console.error;

console.log = function(...args) {
  const message = args.join(' ');
  totalLogs++;
  
  // Contar logs espec√≠ficos
  if (message.includes('[VITALITY DEBUG]')) {
    vitalityLogs++;
    console.error(`üî¥ VITALITY LOG #${vitalityLogs}: ${message}`);
  } else if (message.includes('[RENDER DEBUG]')) {
    renderLogs++;
    console.error(`üî¥ RENDER LOG #${renderLogs}: ${message}`);
  } else if (message.includes('[AUTOSYNC DEBUG]') || message.includes('[SYNC DEBUG]')) {
    syncLogs++;
    console.error(`üî¥ SYNC LOG #${syncLogs}: ${message}`);
  }
  
  // Chamar console.log original
  originalLog.apply(console, args);
};

// Monitorar por 15 segundos
console.log('\nüîç MONITORANDO POR 15 SEGUNDOS...');
console.log('V√° para a aba "Relat√≥rios" e observe se os logs pararam');

const startTime = Date.now();
let intervalId = setInterval(() => {
  const elapsed = Math.floor((Date.now() - startTime) / 1000);
  console.error(`üìä STATUS (${elapsed}s): Vitality: ${vitalityLogs}, Renders: ${renderLogs}, Syncs: ${syncLogs}, Total: ${totalLogs}`);
  
  // Alertar se ainda h√° loop
  if (vitalityLogs > 10) {
    console.error('‚ùå LOOP AINDA PRESENTE! Vitalidade ainda sincronizando constantemente');
  }
  
  if (renderLogs > 20) {
    console.error('‚ùå RE-RENDERS EXCESSIVOS! PerformanceReports ainda renderizando demais');
  }
  
  if (syncLogs > 15) {
    console.error('‚ùå SINCRONIZA√á√ïES EXCESSIVAS! AutoSync ainda disparando demais');
  }
}, 2000);

setTimeout(() => {
  clearInterval(intervalId);
  
  // Restaurar console
  console.log = originalLog;
  console.error = originalError;
  
  console.log('\nüéØ RESULTADO DO TESTE:');
  console.log('=====================');
  
  console.log(`üìä CONTADORES FINAIS:`);
  console.log(`Logs de Vitalidade: ${vitalityLogs}`);
  console.log(`Logs de Render: ${renderLogs}`);
  console.log(`Logs de Sync: ${syncLogs}`);
  console.log(`Total de logs: ${totalLogs}`);
  
  // An√°lise dos resultados
  console.log('\nüîç AN√ÅLISE:');
  
  if (vitalityLogs <= 2) {
    console.log('‚úÖ LOOP DE VITALIDADE CORRIGIDO! Poucos logs de sincroniza√ß√£o.');
  } else if (vitalityLogs <= 5) {
    console.warn('‚ö†Ô∏è MELHORIA PARCIAL: Ainda h√° algumas sincroniza√ß√µes de vitalidade.');
  } else {
    console.error('‚ùå LOOP AINDA PRESENTE: Muitas sincroniza√ß√µes de vitalidade.');
  }
  
  if (renderLogs <= 5) {
    console.log('‚úÖ RE-RENDERS CONTROLADOS! Poucos re-renders detectados.');
  } else if (renderLogs <= 15) {
    console.warn('‚ö†Ô∏è RE-RENDERS MODERADOS: Ainda h√° alguns re-renders.');
  } else {
    console.error('‚ùå RE-RENDERS EXCESSIVOS: Muitos re-renders ainda ocorrendo.');
  }
  
  if (syncLogs <= 3) {
    console.log('‚úÖ SINCRONIZA√á√ïES CONTROLADAS! Poucas sincroniza√ß√µes detectadas.');
  } else if (syncLogs <= 8) {
    console.warn('‚ö†Ô∏è SINCRONIZA√á√ïES MODERADAS: Ainda h√° algumas sincroniza√ß√µes.');
  } else {
    console.error('‚ùå SINCRONIZA√á√ïES EXCESSIVAS: Muitas sincroniza√ß√µes ainda ocorrendo.');
  }
  
  // Teste de responsividade
  console.log('\nüñ±Ô∏è TESTE DE RESPONSIVIDADE:');
  console.log('Agora clique em alguns bot√µes na p√°gina e veja se respondem rapidamente');
  
  let buttonClicks = 0;
  let buttonResponses = 0;
  
  document.addEventListener('click', (event) => {
    if (event.target.tagName === 'BUTTON' || event.target.closest('button')) {
      buttonClicks++;
      const clickTime = Date.now();
      console.log(`üñ±Ô∏è Clique #${buttonClicks} detectado`);
      
      setTimeout(() => {
        buttonResponses++;
        const delay = Date.now() - clickTime;
        if (delay < 100) {
          console.log(`‚úÖ Bot√£o respondeu rapidamente (${delay}ms)`);
        } else {
          console.warn(`‚ö†Ô∏è Bot√£o demorou para responder (${delay}ms)`);
        }
      }, 50);
    }
  });
  
  // Resultado final ap√≥s 10 segundos adicionais
  setTimeout(() => {
    console.log('\nüèÅ TESTE COMPLETO!');
    
    if (vitalityLogs <= 2 && renderLogs <= 5 && syncLogs <= 3) {
      console.log('üéâ SUCESSO! Loop infinito corrigido e performance melhorada!');
    } else if (vitalityLogs <= 5 && renderLogs <= 15 && syncLogs <= 8) {
      console.log('üëç MELHORIA SIGNIFICATIVA! Ainda pode ser otimizado mais.');
    } else {
      console.log('üòû PROBLEMA PERSISTE: Mais corre√ß√µes necess√°rias.');
    }
    
    if (buttonClicks > 0) {
      const responsiveness = (buttonResponses / buttonClicks) * 100;
      console.log(`üñ±Ô∏è Responsividade dos bot√µes: ${responsiveness.toFixed(1)}%`);
    }
  }, 10000);
  
}, 15000);

console.log('‚ú® Teste iniciado! Aguarde os resultados...');
